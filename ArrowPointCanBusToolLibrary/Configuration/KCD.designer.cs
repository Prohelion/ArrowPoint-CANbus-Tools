// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.29995 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>ArrowPointCANBusTool</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>True</UseBaseClass><GenBaseClass>True</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>True</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace ArrowPointCANBusTool.Configuration
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    #region Base entity class
    public partial class EntityBase<T>
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(T));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntityBase object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EntityBase object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out T obj, out System.Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out T obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static T Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((T)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current EntityBase object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EntityBase object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out T obj, out System.Exception exception)
        {
            exception = null;
            obj = default(T);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out T obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static T LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    #endregion

    /// <summary>
    /// Definition of one or more CAN bus networks in one file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class NetworkDefinition : EntityBase<NetworkDefinition>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Document documentField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Node> nodeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Bus> busField;

        /// <summary>
        /// NetworkDefinition class constructor
        /// </summary>
        public NetworkDefinition()
        {
            this.busField = new List<Bus>();
            this.nodeField = new List<Node>();
            this.documentField = new Document();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public Document Document
        {
            get
            {
                return this.documentField;
            }
            set
            {
                this.documentField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Node", Order = 1)]
        public List<Node> Node
        {
            get
            {
                return this.nodeField;
            }
            set
            {
                this.nodeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Bus", Order = 2)]
        public List<Bus> Bus
        {
            get
            {
                return this.busField;
            }
            set
            {
                this.busField = value;
            }
        }
    }

    /// <summary>
    /// Describes the scope of application e.g. the target vehicle or controlled device.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Document : EntityBase<Document>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<string> textField;

        /// <summary>
        /// The name of the network definition document.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }

        /// <summary>
        /// The version of the network definition document.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version { get; set; }

        /// <summary>
        /// The owner or author of the network definition document.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string author { get; set; }

        /// <summary>
        /// The owner company of the network definition document.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string company { get; set; }

        /// <summary>
        /// The release date of this version of the network definition document.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string date { get; set; }


        /// <summary>
        /// Document class constructor
        /// </summary>
        public Document()
        {
            this.textField = new List<string>();
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this.textField;
            }
            set
            {
                this.textField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = true)]
    public partial class BasicLabelType : EntityBase<BasicLabelType>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private BasicLabelTypeType typeField;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }


        public BasicLabelType()
        {
            this.typeField = BasicLabelTypeType.value;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BasicLabelTypeType.value)]
        public BasicLabelTypeType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    public enum BasicLabelTypeType
    {

        /// <remarks/>
        value,

        /// <remarks/>
        invalid,

        /// <remarks/>
        error,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = true)]
    public partial class BasicSignalType : EntityBase<BasicSignalType>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private BasicSignalTypeEndianess endianessField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lengthField;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string offset { get; set; }


        public BasicSignalType()
        {
            this.endianessField = BasicSignalTypeEndianess.little;
            this.lengthField = "1";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BasicSignalTypeEndianess.little)]
        public BasicSignalTypeEndianess endianess
        {
            get
            {
                return this.endianessField;
            }
            set
            {
                this.endianessField = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string length
        {
            get
            {
                return this.lengthField;
            }
            set
            {
                this.lengthField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    public enum BasicSignalTypeEndianess
    {

        /// <remarks/>
        little,

        /// <remarks/>
        big,
    }

    /// <summary>
    /// An endpoint connected to the network (e.g. an electronic control unit) that is able to send messages to or receive messages from other endpoints.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Node : EntityBase<Node>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Var> varField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nameField;

        /// <summary>
        /// Unique identifier of the network node.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id { get; set; }


        public Node()
        {
            this.varField = new List<Var>();
            this.nameField = "";
        }

        [System.Xml.Serialization.XmlElementAttribute("Var", Order = 0)]
        public List<Var> Var
        {
            get
            {
                return this.varField;
            }
            set
            {
                this.varField = value;
            }
        }

        /// <summary>
        /// Human-readable name of the network node (e.g. "Brake").
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }

    /// <summary>
    /// A variable, a symbolic name associated to a chunk of information (e.g. a string or a value).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Var : EntityBase<Var>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Value valueField;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Notes { get; set; }

        /// <summary>
        /// Unique name of the variable.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }


        /// <summary>
        /// Var class constructor
        /// </summary>
        public Var()
        {
            this.valueField = new Value();
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public Value Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <summary>
    /// Details of how the raw value of the signal/variable shall be interpreted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Value : EntityBase<Value>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private ValueType typeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double slopeField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double interceptField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string unitField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double minField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private double maxField;

        public Value()
        {
            this.typeField = ValueType.unsigned;
            this.slopeField = 1D;
            this.interceptField = 0D;
            this.unitField = "1";
            this.minField = 0D;
            this.maxField = 1D;
        }

        /// <summary>
        /// Datatype of the value e.g. "unsigned","signed" or IEE754 "single", "double".
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ValueType.unsigned)]
        public ValueType type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        /// <summary>
        /// The slope "m" of a linear equation y = mx + b.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(1D)]
        public double slope
        {
            get
            {
                return this.slopeField;
            }
            set
            {
                this.slopeField = value;
            }
        }

        /// <summary>
        /// The y-axis intercept "b" of a linear equation y = mx + b.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(0D)]
        public double intercept
        {
            get
            {
                return this.interceptField;
            }
            set
            {
                this.interceptField = value;
            }
        }

        /// <summary>
        /// Physical unit of the value written as unit term as described in "The Unified Code for Units of Measure" (http://unitsofmeasure.org/ucum.html)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string unit
        {
            get
            {
                return this.unitField;
            }
            set
            {
                this.unitField = value;
            }
        }

        /// <summary>
        /// Lower validity limit of the interpreted value after using the slope/intercept equation.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(0D)]
        public double min
        {
            get
            {
                return this.minField;
            }
            set
            {
                this.minField = value;
            }
        }

        /// <summary>
        /// Upper validity limit of the interpreted value after using the slope/intercept equation.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(1D)]
        public double max
        {
            get
            {
                return this.maxField;
            }
            set
            {
                this.maxField = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    public enum ValueType
    {

        /// <remarks/>
        unsigned,

        /// <remarks/>
        signed,

        /// <remarks/>
        single,

        /// <remarks/>
        @double,
    }

    /// <summary>
    /// A network transport system that transfers the data between several nodes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Bus : EntityBase<Bus>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Message> messageField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string baudrateField;

        /// <summary>
        /// Human-readable name of the bus network (e.g. "Comfort").
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }


        public Bus()
        {
            this.messageField = new List<Message>();
            this.baudrateField = "500000";
        }

        [System.Xml.Serialization.XmlElementAttribute("Message", Order = 0)]
        public List<Message> Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }

        /// <summary>
        /// Nominal data transfer rate in baud (e.g. 500000, 125000, 100000 or 83333).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        [System.ComponentModel.DefaultValueAttribute("500000")]
        public string baudrate
        {
            get
            {
                return this.baudrateField;
            }
            set
            {
                this.baudrateField = value;
            }
        }
    }

    /// <summary>
    /// A datagram that is used to transport payload data along the bus network.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Message : EntityBase<Message>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NodeRef> producerField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Multiplex> multiplexField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Signal> signalField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private MessageLength lengthField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string intervalField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool triggeredField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private string countField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private MessageFormat formatField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool fdField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool bitrateswitchField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool remoteField;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Notes { get; set; }

        /// <summary>
        /// The unique identifier of the message. May have 11-bit (Standard frame format) or 29-bit (Extended frame format). The identifier is usally written in hexadecimal format e.g. 0x123. If format is "extended" this identifier includes both Base ID (11 bits) and Extended ID (18 bits).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id { get; set; }

        /// <summary>
        /// Human-readable name of the network message (e.g."OBD-Info").
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name { get; set; }


        public Message()
        {
            this.signalField = new List<Signal>();
            this.multiplexField = new List<Multiplex>();
            this.producerField = new List<NodeRef>();
            this.lengthField = MessageLength.auto;
            this.intervalField = "0";
            this.triggeredField = false;
            this.countField = "0";
            this.formatField = MessageFormat.standard;
            this.fdField = false;
            this.bitrateswitchField = false;
            this.remoteField = false;
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NodeRef", IsNullable = false)]
        public List<NodeRef> Producer
        {
            get
            {
                return this.producerField;
            }
            set
            {
                this.producerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Multiplex", Order = 2)]
        public List<Multiplex> Multiplex
        {
            get
            {
                return this.multiplexField;
            }
            set
            {
                this.multiplexField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Signal", Order = 3)]
        public List<Signal> Signal
        {
            get
            {
                return this.signalField;
            }
            set
            {
                this.signalField = value;
            }
        }

        /// <summary>
        /// Number of bytes available in the data field of the message (data length code). "auto" (default) calculate minimum length for the contained signals in the message. Length greater than 8 is only allowed in messages with flexible data rate (fd).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MessageLength.auto)]
        public MessageLength length
        {
            get
            {
                return this.lengthField;
            }
            set
            {
                this.lengthField = value;
            }
        }

        /// <summary>
        /// Repetition interval of a cyclic network message in milliseconds.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string interval
        {
            get
            {
                return this.intervalField;
            }
            set
            {
                this.intervalField = value;
            }
        }

        /// <summary>
        /// Sending behavior of the network message. True, if message is triggered by signal changes.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool triggered
        {
            get
            {
                return this.triggeredField;
            }
            set
            {
                this.triggeredField = value;
            }
        }

        /// <summary>
        /// Number of repetitions of a triggered network message. 0 (default) for infinite repetitions.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string count
        {
            get
            {
                return this.countField;
            }
            set
            {
                this.countField = value;
            }
        }

        /// <summary>
        /// Frame format of the network message.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MessageFormat.standard)]
        public MessageFormat format
        {
            get
            {
                return this.formatField;
            }
            set
            {
                this.formatField = value;
            }
        }

        /// <summary>
        /// True, if frame formats of the network message supports flexible data rate (dual bit rate).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool fd
        {
            get
            {
                return this.fdField;
            }
            set
            {
                this.fdField = value;
            }
        }

        /// <summary>
        /// True, if this CAN-FD message is sent with the BRS (bit-rate switch) bit set, i.e. a higher bitrate should be used to send the payload of the message. Setting this to bitrateswitch="true", if canfd="false" or canfd unset (default), is an error.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool bitrateswitch
        {
            get
            {
                return this.bitrateswitchField;
            }
            set
            {
                this.bitrateswitchField = value;
            }
        }

        /// <summary>
        /// True, if message is a remote frame. Not possible in messages with flexible data rate (fd).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool remote
        {
            get
            {
                return this.remoteField;
            }
            set
            {
                this.remoteField = value;
            }
        }
    }

    /// <summary>
    /// An endpoint connected to the network that is able to send messages to or receive messages from other endpoints.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class NodeRef : EntityBase<NodeRef>
    {

        /// <summary>
        /// Referencing a network node by its unique identifier.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id { get; set; }

    }

    /// <summary>
    /// A looping counter to make a group of signals (MuxGroup) alternately active at a time.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Multiplex : BasicSignalType
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<MuxGroup> muxGroupField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NodeRef> consumerField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Value valueField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<BasicLabelType> labelSetField;

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string Notes { get; set; }


        /// <summary>
        /// Multiplex class constructor
        /// </summary>
        public Multiplex()
        {
            this.labelSetField = new List<BasicLabelType>();
            this.valueField = new Value();
            this.consumerField = new List<NodeRef>();
            this.muxGroupField = new List<MuxGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("MuxGroup", Order = 0)]
        public List<MuxGroup> MuxGroup
        {
            get
            {
                return this.muxGroupField;
            }
            set
            {
                this.muxGroupField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NodeRef", IsNullable = false)]
        public List<NodeRef> Consumer
        {
            get
            {
                return this.consumerField;
            }
            set
            {
                this.consumerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public Value Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Label", typeof(Label), IsNullable = false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("LabelGroup", typeof(LabelGroup), IsNullable = false)]
        public List<BasicLabelType> LabelSet
        {
            get
            {
                return this.labelSetField;
            }
            set
            {
                this.labelSetField = value;
            }
        }
    }

    /// <summary>
    /// A group of signals that is just valid when the count value of the group matches with the looping counter (Multiplex).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class MuxGroup : EntityBase<MuxGroup>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Signal> signalField;

        /// <summary>
        /// Count value of the Multiplex when the signals of this group become valid.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public long count { get; set; }


        /// <summary>
        /// MuxGroup class constructor
        /// </summary>
        public MuxGroup()
        {
            this.signalField = new List<Signal>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Signal", Order = 0)]
        public List<Signal> Signal
        {
            get
            {
                return this.signalField;
            }
            set
            {
                this.signalField = value;
            }
        }
    }

    /// <summary>
    /// A discrete part of information contained in the payload of a message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Signal : BasicSignalType
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NodeRef> consumerField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private Value valueField;

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<BasicLabelType> labelSetField;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string Notes { get; set; }


        /// <summary>
        /// Signal class constructor
        /// </summary>
        public Signal()
        {
            this.labelSetField = new List<BasicLabelType>();
            this.valueField = new Value();
            this.consumerField = new List<NodeRef>();
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("NodeRef", IsNullable = false)]
        public List<NodeRef> Consumer
        {
            get
            {
                return this.consumerField;
            }
            set
            {
                this.consumerField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public Value Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Order = 3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Label", typeof(Label), IsNullable = false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("LabelGroup", typeof(LabelGroup), IsNullable = false)]
        public List<BasicLabelType> LabelSet
        {
            get
            {
                return this.labelSetField;
            }
            set
            {
                this.labelSetField = value;
            }
        }
    }

    /// <summary>
    /// Descriptive name for a single value e.g. to describe an enumeration, mark special,invalid or error values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Label : BasicLabelType
    {

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string value { get; set; }

    }

    /// <summary>
    /// Descriptive name for a sequence of adjacent values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class LabelGroup : BasicLabelType
    {

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string from { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string to { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    public enum MessageLength
    {

        /// <remarks/>
        auto,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("12")]
        Item12,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("16")]
        Item16,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20")]
        Item20,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("24")]
        Item24,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("32")]
        Item32,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("48")]
        Item48,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("64")]
        Item64,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    public enum MessageFormat
    {

        /// <remarks/>
        standard,

        /// <remarks/>
        extended,
    }

    /// <summary>
    /// A set of label and label groups. Each label describes the meaning of a single raw value by an alias name. A single value can only belong to a one label or label group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class LabelSet : EntityBase<LabelSet>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<BasicLabelType> itemsField;

        /// <summary>
        /// LabelSet class constructor
        /// </summary>
        public LabelSet()
        {
            this.itemsField = new List<BasicLabelType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("Label", typeof(Label), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("LabelGroup", typeof(LabelGroup), Order = 0)]
        public List<BasicLabelType> Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }
    }

    /// <summary>
    /// Origin network node that is the sender of the assigned message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Producer : EntityBase<Producer>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NodeRef> nodeRefField;

        /// <summary>
        /// Producer class constructor
        /// </summary>
        public Producer()
        {
            this.nodeRefField = new List<NodeRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("NodeRef", Order = 0)]
        public List<NodeRef> NodeRef
        {
            get
            {
                return this.nodeRefField;
            }
            set
            {
                this.nodeRefField = value;
            }
        }
    }

    /// <summary>
    /// Network node that is a user/receiver of the assigned signal.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://kayak.2codeornot2code.org/1.0")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://kayak.2codeornot2code.org/1.0", IsNullable = false)]
    public partial class Consumer : EntityBase<Consumer>
    {

        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<NodeRef> nodeRefField;

        /// <summary>
        /// Consumer class constructor
        /// </summary>
        public Consumer()
        {
            this.nodeRefField = new List<NodeRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("NodeRef", Order = 0)]
        public List<NodeRef> NodeRef
        {
            get
            {
                return this.nodeRefField;
            }
            set
            {
                this.nodeRefField = value;
            }
        }
    }
}
